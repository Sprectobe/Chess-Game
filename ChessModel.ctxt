#BlueJ class context
comment0.params=fileName
comment0.target=ChessModel(java.lang.String)
comment1.params=
comment1.target=void\ createChessPieces()
comment10.params=m
comment10.target=Move\ castleMove(Move)
comment10.text=\r\n\ The\ move\ to\ m.to\ happened.\ Can\ we\ castle?\r\n
comment11.params=king\ pieces
comment11.target=boolean\ inCheck(IChessPiece,\ java.util.ArrayList)
comment11.text=--------------------------------------------------------------------------\r\n\ The\ king\ is\ in\ check\ if\ a\ valid\ move\ exists\ for\ at\ least\ one\ chess\ piece,\r\n\ on\ the\ offense,\ from\ its\ current\ location\ on\ the\ board\ to\ the\ location\r\n\ occupied\ by\ the\ king.\r\n\ -------------------------------------------------------------------------\r\n
comment12.params=p
comment12.target=boolean\ inCheck(Player)
comment12.text=--------------------------------------------------------------------------\r\n\ This\ inCheck\ method\ identifies\ the\ king\ in\ question,\ and\ the\ opponent\r\n\ chess\ pieces,\ to\ determine\ whether\ or\ not\ it\ is\ in\ check.\r\n\ -------------------------------------------------------------------------\r\n
comment13.params=
comment13.target=boolean\ isCheckMate()
comment13.text=--------------------------------------------------------------------------\r\n\ The\ state\ of\ the\ king\ is\ check\ mate\ if\ no\ valid\ move\ on\ the\ chess\ board\r\n\ model\ exists\ for\ any\ chess\ piece\ of\ the\ same\ color\ as\ the\ king\ in\r\n\ question.\r\n\ \r\n\ For\ each\ chess\ piece\ in\ the\ ArrayList\ of\ pieces\ for\ that\ color,\ and\ still\r\n\ on\ the\ chess\ board\ model,\ this\ method\ does\ an\ exhaustive\ search\ to\ find\ a\r\n\ single\ valid\ move\ from\ its\ current\ location,\ i.e.\ to\ any\ other\ location\ on\r\n\ the\ board.\r\n\ -------------------------------------------------------------------------\r\n
comment14.params=s
comment14.target=IChessPiece\ pieceAt(Location)
comment15.params=a\ b
comment15.target=IChessPiece\ pieceAt(int,\ int)
comment16.params=s\ piece
comment16.target=void\ setPiece(Location,\ IChessPiece)
comment16.text=\ ----------------------------------------------------------\r\n\ This\ method\ not\ only\ sets\ the\ piece\ on\ the\ board\ model,\r\n\ but\ it\ also\ sets\ the\ location\ of\ that\ piece\ to\ its\ location\r\n\ on\ the\ board.\r\n\ ----------------------------------------------------------\r\n
comment17.params=
comment17.target=Player\ currentPlayer()
comment18.params=
comment18.target=void\ setNextPlayer()
comment19.params=
comment19.target=int\ getMessage()
comment2.params=fileName
comment2.target=void\ createGameMoves(java.lang.String)
comment20.params=
comment20.target=Move\ AI()
comment21.params=
comment21.target=Move\ attack()
comment22.params=
comment22.target=Move\ moveThreat()
comment23.params=
comment23.target=Move\ attackWithCaution()
comment24.params=
comment24.target=Move\ attackBoard()
comment25.params=fromPieces\ toPieces
comment25.target=Move\ attackPieces(java.util.ArrayList,\ java.util.ArrayList)
comment26.params=fromPieces\ opponent
comment26.target=Move\ attackKing(java.util.ArrayList,\ Player)
comment3.params=filename
comment3.target=void\ read(java.lang.String)
comment4.params=fromPieces\ toPieces
comment4.target=Move\ getGameMove(java.util.ArrayList,\ java.util.ArrayList)
comment5.params=
comment5.target=void\ reset()
comment6.params=s
comment6.target=boolean\ promote(Location)
comment6.text=\ ---------------------------------------------------------\r\n\ \ This\ method\ promotes\ a\ pawn\ to\ a\ queen.\r\n\ ---------------------------------------------------------\r\n
comment7.params=moveSpecs
comment7.target=void\ move(Move)
comment7.text=\ ---------------------------------------------------------\r\n\ \ The\ move\ method\ first\ saves\ the\ state\ of\ the\ chess\ piece\r\n\ \ involved\ in\ the\ move,\ \r\n\ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ move.fromPiece\ &\ move.toPiece\r\n\ \ \r\n\ \ before\ it\ makes\ the\ move.\r\n\ ---------------------------------------------------------\r\n
comment8.params=moveSpecs
comment8.target=void\ undo(Move)
comment8.text=\ ---------------------------------------------------------------\r\n\ The\ undo\ method\ restores\ the\ chess\ board\ model\ to\ the\ previous\r\n\ state,\ the\ state\ just\ prior\ to\ the\ move.\r\n\ -------------------------------------------------------------\r\n
comment9.params=m
comment9.target=boolean\ isValidMove(Move)
comment9.text=\ -----------------------------------------------------------------\r\n\ The\ isValidMove\ method\ identifies\ the\ chess\ piece\ and\ checks\ if.\r\n\ the\ move\ is\ valid\ for\ that\ particular\ piece.\ The\ move\ by\ a\ player\ \r\n\ is\ valid\ means\ that\ its\ king,\ after\ the\ move,\ is\ not\ in\ check.\r\n\ \r\n\ If\ the\ move\ is\ valid\ within\ the\ context\ of\ the\ particular\ chess\r\n\ piece,\ the\ method\ tests\ whether\ or\ not\ the\ move\ is\ valid\ within\r\n\ the\ context\ of\ the\ game\ over\ all.\ This\ is\ accomplished\ with\ the\r\n\ following\ sequence\:\r\n\ \r\n\ \ 1)\ Locally\ save\ whether\ the\ king\ is\ in\ check\ before\ the\ move.\r\n\ \ 2)\ Make\ the\ move\ change\ to\ the\ model.\r\n\ \ 3)\ Locally\ save\ whether\ the\ king\ is\ in\ check\ after\ the\ move.\r\n\ \ 4)\ Undo\ the\ move\ change\ to\ the\ model.\r\n\ \r\n\ From\ the\ above,\ the\ method\ determines,\ as\ a\ method\ side\ effect,\r\n\ the\ most\ appropriate\ message\ code\ and\ finally\ returns\ the\ result\r\n\ for\ whether\ or\ not\ the\ move\ is\ valid,\ i.e.\ true\ or\ false.\r\n\ \r\n\ messageCode\ index\:\r\n\ \r\n\ \ \ \ \ \ 0\:\ no\ message,\ no\ error\r\n\ \ \ \ \ \ 1\:\ "Invalid\ move;\ the\ King\ is\ placed\ in\ check."\r\n\ \ \ \ \ \ 2\:\ "Invalid\ move;\ the\ King\ remains\ in\ check."\r\n\ \ \ \ \ \ 3\:\ ""\ +\ piece.type()\ +\ "\:\ \ Invalid\ move."\r\n\ \r\n\ -----------------------------------------------------------------\r\n
numComments=27
